<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>第一次提交</title>
    <url>/2023/11/01/First-Page-cn/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>tc</category>
      </categories>
      <tags>
        <tag>tt</tag>
      </tags>
  </entry>
  <entry>
    <title>First Page</title>
    <url>/2023/11/01/First-Page-en/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>tc</category>
      </categories>
      <tags>
        <tag>tt</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS系统下x86_64-linux交叉编译记录</title>
    <url>/2023/11/15/cross-compilation-on-MacOS/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在自学<a href="https://jyywiki.cn/OS/2023/index.html">NJU OS: Operating System Design and Implementation</a>课程的过程中，所有的实验都在<code>Abstract Machine</code>上完成，源码可以参考<a href="https://git.nju.edu.cn/jyy/os-workbench">Yanyan Jiang / os-workbench · 极狐GitLab</a>。<code>Abstract Machine</code>可以支持多种架构，但都需要在<code>Linux</code>内核的虚拟机中完成。本人平时用的是<code>macOS</code>系统，因此不能运行<code>Linux</code>下的可执行文件，但实验最终是通过<code>qemu</code>运行虚拟机的方式载入<code>Abstract Machine</code>，所以理论上可以不需要在<code>macOS</code>上运行程序。于是某一天本人突发奇想，能不能通过交叉编译的方式，在<code>macOS</code>上编译出<code>Linux</code>的可执行文件，并用<code>qemu</code>虚拟机运行。本文就简单梳理了将这一想法实现的过程。</p>
<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h1 id="步骤一-安装交叉编译工具链"><a href="#步骤一-安装交叉编译工具链" class="headerlink" title="步骤一 安装交叉编译工具链"></a>步骤一 安装交叉编译工具链</h1><p>在<code>macOS</code>上，<code>Homebrew</code>是常用的包管理工具。安装<code>Homebrew</code>需要运行的命令如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>通过<code>Homebrew</code>安装<code>macOS</code>下用于构建交叉编译工具链的工具<code>crosstool-ng</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install crosstool-ng</span><br></pre></td></tr></table></figure>
<p>另外也可以从源代码构建，源代码编译时可以有更多的编译选项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/crosstool-ng/crosstool-ng.git</span><br><span class="line"><span class="built_in">cd</span> crosstool-ng</span><br><span class="line">./bootstrap</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>可以从<code>crosstool-ng</code>的<a href="https://crosstool-ng.github.io">官网链接</a>查看更多使用细节和源代码构建细节。</p>
<p>安装或编译构建完成后，可以通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ct-ng --version</span><br></pre></td></tr></table></figure>
<p>查看是否安装成功。</p>
<h1 id="步骤二-构建区分大小写的文件系统"><a href="#步骤二-构建区分大小写的文件系统" class="headerlink" title="步骤二 构建区分大小写的文件系统"></a>步骤二 构建区分大小写的文件系统</h1><p>这一步主要是针对<code>macOS</code>系统而言。在 <code>macOS</code>上，默认情况下文件系统是不区分大小写的，这意味着文件和文件夹的名称对大小写不敏感。这是<code>macOS</code>文件系统的默认行为，称为不区分大小写的文件系统。</p>
<p>找到一个想要存放文件系统镜像的目录，运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdiutil create -size 20g -fs JHFS+X -volname MyCaseSensitiveDisk -<span class="built_in">type</span> SPARSE -layout NONE -attach MyCaseSensitiveDisk.sparseimage</span><br></pre></td></tr></table></figure>
<p>这个<code>Bash</code>命令使用 <code>hdiutil</code> 工具创建了一个大小为 20GB、文件系统为<code>JHFS+X</code>（区分大小写的<code>HFS+</code> 文件系统）、卷标为 <code>MyCaseSensitiveDisk</code>、类型为 <code>SPARSE</code>的 <code>sparseimage</code>文件。<code>sparseimage</code> 是一种稀疏映像，它只占用实际使用的磁盘空间。</p>
<p>接下来要将这个文件挂载到系统中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdiutil attach MyCaseSensitiveDisk.sparseimage</span><br></pre></td></tr></table></figure>
<p>执行这个命令后，你应该能够在 <code>/Volumes</code> 目录下看到一个新的目录，其名称为你之前指定的卷标，也就是 <code>MyCaseSensitiveDisk</code>。你可以通过这个目录访问挂载的文件系统中的文件和目录。</p>
<p>请记住，在使用区分大小写的文件系统时，文件和目录的名称是区分大小写的。因此，<code>/Volumes/MyCaseSensitiveDisk</code> 和 <code>/Volumes/mycasesensitivedisk</code> 是不同的路径。</p>
<h1 id="步骤三-配置crosstool-ng"><a href="#步骤三-配置crosstool-ng" class="headerlink" title="步骤三 配置crosstool-ng"></a>步骤三 配置crosstool-ng</h1><p>1、在挂载的文件中创建一个新目录，用于保存交叉编译工具链的配置和输出。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my_toolchain</span><br><span class="line"><span class="built_in">cd</span> my_toolchain</span><br></pre></td></tr></table></figure>
<p>2、运行生成配置文件 ，选择目标和工具链配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ct-ng menuconfig</span><br></pre></td></tr></table></figure>
<p>这会启动一个命令行界面，让你配置交叉编译工具链的各个方面，包括目标架构、工具链版本等。建议在crosstool-ng的官网查询各项配置的细节。此时在目录下会生成<code>.config</code>的文件。</p>
<p>3、在完成配置后，运行以下命令开始构建工具链：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ct-ng build</span><br></pre></td></tr></table></figure>
<p>这一步时间会比较长，而且由于<code>Abstract Machine</code>用了<code>multilib</code>兼容了32位系统，用<code>crosstool-ng</code>构建<code>multilib</code>时会花费更多时间，另外在本人构建<code>multilib</code>时，编译过程发生了一些<code>bug</code>，详情可见这个issue：<a href="https://github.com/crosstool-ng/crosstool-ng/issues/2068">Build failed in step &#39;Installing core C gcc compiler&#39; · Issue #2068 · crosstool-ng/crosstool-ng · GitHub</a>。</p>
<p>4、最后，将构建的交叉编译工具链复制到本地目录。注意，由于依赖，需要将构建的整个<code>x-tools</code>复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> -r /Volumes/MyCaseSensitiveDisk/x-tools/ /path/to/my_directory</span><br></pre></td></tr></table></figure>
<p>复制完之后即可弹出磁盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hdiutil eject /Volumes/MyCaseSensitiveDisk</span><br></pre></td></tr></table></figure>
<p>5、最后，你可以在 <code>my_toolchain/build</code> 目录下找到生成的交叉编译工具链。将它添加到系统的 <code>PATH</code> 中，以便在命令行中使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/path/to/my_toolchain/build/bin</span><br></pre></td></tr></table></figure>
<h1 id="步骤四-项目编译工具链"><a href="#步骤四-项目编译工具链" class="headerlink" title="步骤四 项目编译工具链"></a>步骤四 项目编译工具链</h1><p>在本项目中，进入<code>os-workbench/kernel</code>目录，运行<code>make</code>相关命令即可，需要注意在<code>Makefile</code>中，需要使用交叉编译工具链，而不是本地编译工具链的至少包括但不限于</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">AR        = <span class="variable">$(CROSS_COMPILE)</span>ar</span><br><span class="line">AS        = <span class="variable">$(CROSS_COMPILE)</span>gcc</span><br><span class="line">CC        = <span class="variable">$(CROSS_COMPILE)</span>gcc</span><br><span class="line">CXX       = <span class="variable">$(CROSS_COMPILE)</span>g++</span><br><span class="line">LD        = <span class="variable">$(CROSS_COMPILE)</span>ld</span><br><span class="line">OBJDUMP   = <span class="variable">$(CROSS_COMPILE)</span>objdump</span><br><span class="line">OBJCOPY   = <span class="variable">$(CROSS_COMPILE)</span>objcopy</span><br><span class="line">READELF   = <span class="variable">$(CROSS_COMPILE)</span>readelf</span><br></pre></td></tr></table></figure>
<p>以上就是MacOS系统下x86_64-linux交叉编译记录。</p>
]]></content>
      <categories>
        <category>Tech</category>
      </categories>
      <tags>
        <tag>Cross Compilation</tag>
      </tags>
  </entry>
  <entry>
    <title>PKU-Geekgame-3rd</title>
    <url>/2023/11/01/PKU-Geekgame-3rd/</url>
    <content><![CDATA[<h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>这是我的第三届北京大学信息安全综合能力竞赛参赛记录。10月6日知道了学校有这个比赛，这是<a href="https://geekgame.pku.edu.cn">比赛的官网</a>。虽然对网络安全之前没有系统学习过，也没有任何实践，但课余的时候自学过计算机系统导论和操作系统的一些理论，就来参加这个比赛了。比赛为期一周，10月13日18:00-10月20日18:00，两个阶段结束后最终拿了校内的38名，下面是这次比赛我的writeup。</p>
<h1 id="一眼盯帧（通过）"><a href="#一眼盯帧（通过）" class="headerlink" title="一眼盯帧（通过）"></a>一眼盯帧（通过）</h1><p>(# prob23-signin)</p>
<p>gif文件中开头为synt，在搜索引擎中查找ROT13解码，输入文本解码即可。</p>
<h1 id="小北问答（通过）"><a href="#小北问答（通过）" class="headerlink" title="小北问答（通过）"></a>小北问答（通过）</h1><p>(# prob18-trivia)</p>
<p>1、在hpc.pku.edu.cn的上机流程中，找到【4】提交作业中，有【4.1】sbatch提交作业和【4.2】salloc交互运行作业两种</p>
<p>2、找到GitHub中小米开源手机内核<a href="https://github.com/MiCode/Xiaomi_Kernel_OpenSource">仓库</a>。找到Redmi K60 Ultra的分支，在分支内的Makefile文件可以找到</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">VERSION = 5</span><br><span class="line">PATCHLEVEL = 15</span><br><span class="line">SUBLEVEL = 78</span><br></pre></td></tr></table></figure>
<p>连接起来就是版本号。</p>
<p>3、在GitHub上可以找到苹果内部识别的<a href="https://gist.github.com/adamawolf/3048717">汇总</a>。其中有</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Watch6,14 : Apple Watch Series 8 41mm case (GPS)</span><br><span class="line">Watch6,15 : Apple Watch Series 8 45mm case (GPS)</span><br><span class="line">Watch6,16 : Apple Watch Series 8 41mm case (GPS+Cellular)</span><br><span class="line">Watch6,17 : Apple Watch Series 8 45mm case (GPS+Cellular)</span><br></pre></td></tr></table></figure>
<p>4、找到PKU GeekGame的开源后端(<a href="https://github.com/PKU-GeekGame/gs-backend">GitHub - PKU-GeekGame/gs-backend: Project Guiding Star: The Backend</a>)。在所有文件中搜索“昵称”，找到在src/store/user_profile_store.py下有函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_deep_val_nickname</span>(<span class="params">cls, name: <span class="built_in">str</span></span>) -&gt; <span class="type">Optional</span>[<span class="built_in">str</span>]:</span><br><span class="line">    all_whitespace = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> name:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> cls.DISALLOWED_CHARS:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;昵称中不能包含字符 <span class="subst">&#123;<span class="built_in">hex</span>(<span class="built_in">ord</span>(c))&#125;</span>&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> cls.WHITESPACE_CHARS:</span><br><span class="line">            all_whitespace = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> all_whitespace:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;昵称不能全为空格&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p>在个人电脑上运行函数以及文件中相关的函数，得到结果后提交，但是结果不对，后发现在Readme中，有</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> Install Python (≥3.8)</span><br></pre></td></tr></table></figure>
<p>考虑平台为过去开发，从3.8开始往后尝试，最终结果为3.8平台的结果。</p>
<p>5、<a href="https://web.archive.org/">web.archive.org</a>可以访问过去的网页快照。需要使用bilibili.us的域名</p>
<p>6、查询赞助商对应的活动，找到了<a href="http://www.iaspbo.com.cn">2023年卢森堡iasp世界大会</a>，因此这是卢森堡的建筑。搜索卢森堡著名建筑，比对图片，可以知道是卢森堡音乐厅。</p>
<h1 id="Z公司的服务器（flag1）"><a href="#Z公司的服务器（flag1）" class="headerlink" title="Z公司的服务器（flag1）"></a>Z公司的服务器（flag1）</h1><p>(# prob05-zserver)</p>
<p>在网页终端和本地连接，发现会返回�*B00000000000000。搜索可以发现在使用lszrz的sz、rz命令时会有相关报错发生。第一阶段时，在Windows系统中使用xshell进行连接，发现文件不会成功下载。</p>
<p>第二阶段，在本地（MacOS）配置zmodem的环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install lrzsz</span><br></pre></td></tr></table></figure>
<p>配置/iterm2-send-zmodem.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># iterm2-send-zmodem.sh</span></span><br><span class="line"></span><br><span class="line">FILE=`osascript -e <span class="string">&#x27;tell application &quot;iTerm&quot; to activate&#x27;</span> -e <span class="string">&#x27;tell application &quot;iTerm&quot; to set thefile to choose file with prompt &quot;Choose a file to send&quot;&#x27;</span> -e <span class="string">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Cancelled.</span><br><span class="line">    <span class="comment"># Send ZModem cancel</span></span><br><span class="line">    <span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$FILE</span></span><br><span class="line">    /usr/local/bin/sz -e <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Received $FILE</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>和iterm2-recv-zmodem.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># iterm2-recv-zmodem.sh</span></span><br><span class="line"></span><br><span class="line">FILE=`osascript -e <span class="string">&#x27;tell application &quot;iTerm&quot; to activate&#x27;</span> -e <span class="string">&#x27;tell application &quot;iTerm&quot; to set thefile to choose folder with prompt &quot;Choose a folder to place received files in&quot;&#x27;</span> -e <span class="string">&quot;do shell script (\&quot;echo \&quot;&amp;(quoted form of POSIX path of thefile as Unicode text)&amp;\&quot;\&quot;)&quot;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$FILE</span> = <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> Cancelled.</span><br><span class="line">    <span class="comment"># Send ZModem cancel</span></span><br><span class="line">    <span class="built_in">echo</span> -e \\x18\\x18\\x18\\x18\\x18</span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Cancelled transfer</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$FILE</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$FILE</span>&quot;</span></span><br><span class="line">    /usr/local/bin/rz -e</span><br><span class="line">    <span class="built_in">echo</span> \<span class="comment"># Received $FILE</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>连接后选择下载地址即可成功下载得到falg.txt文件。</p>
<h1 id="基本功（通过）"><a href="#基本功（通过）" class="headerlink" title="基本功（通过）"></a>基本功（通过）</h1><p>(# prob24-password)</p>
<p>1、第一个压缩包中有一个压缩文件chromedriver_linux64.zip，可以用明文攻击来破解压缩文件。找到这个实际上是chrome浏览器的驱动器，根据这个chromedriver_linux64.zip的CRC值，找到完全一样的文件可以<a href="https://chromedriver.storage.googleapis.com/83.0.4103.14/chromedriver_linux64.zip">下载</a>。用GitHub上Linux平台的<a href="https://github.com/kimci86/bkcrack">bkcrack</a>工具，可以破解zip文件的key，用key得到新的指定密码的压缩包解压。</p>
<p>相关命令为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bkcrack -C challenge_1.zip -c chromedriver_linux64.zip -p chromedriver_linux64.zip</span><br><span class="line">bkcrack -C challenge_1.zip -k 9a9b3ae9 55ec8fe1 c7575174 -U new.zip 123</span><br></pre></td></tr></table></figure>
<p>解出此题时下载了所有版本的驱动文件，逐一比对密钥值后解出了key值。</p>
<p>2、第二个压缩包是pcapng文件，这个文件有一部分字节是可以确定的，参考<a href="https://pcapng.com">pcapng文件格式</a>。将<a href="https://pcapng.com/#SHB_BlockType">Block Type</a>、<a href="https://pcapng.com/#SHB_Version">Major Version</a>、<a href="https://pcapng.com/#SHB_SectionLength">Section Length</a>的前8位作为明文。</p>
<p>相关命令为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bkcrack -C challenge_2.zip -c flag2.pcapng -x 0 0a0d0d0a -x 12 01000000ffffffffffffffff</span><br><span class="line">bkcrack -C challenge_2.zip -k 9a9b3ae9 55ec8fe1 c7575174 -U 2.zip 123</span><br></pre></td></tr></table></figure>
<h1 id="Dark-Room（flag1）"><a href="#Dark-Room（flag1）" class="headerlink" title="Dark Room（flag1）"></a>Dark Room（flag1）</h1><p>(# prob16-darkroom)</p>
<p>本题的第一个flag需要以117%的sanity通关可以获得flag。</p>
<p>游戏中需要探索地图各个位置的物品，经过查询游戏修改前的源码，以及对游戏的探索，这是最容易通关的一条路径：</p>
<p>1、在北部找到铜钥匙</p>
<p>2、获得trinket，并使用</p>
<p>3、用铜钥匙开门</p>
<p>4、到达饮用咖啡的位置</p>
<p>5、在西南角的北面获得金钥匙</p>
<p>6、在西北角用金钥匙开门</p>
<p>7、（最关键）在游戏任何阶段，连续help三次并加到sanity，这是由于不用help的最佳通关sanity是90%，help成功可以加9%（源码概率20%），失败会减去6%或16%（源码概率80%），猜测实际概率可能也有所改动。</p>
<p>本人因运气比较好，在尝试几次后开头连续help三次成功，即通过后续最佳路径通关，一般情况下，可以写一个expect脚本进行不断尝试。</p>
<h1 id="Emoji-Wordle（通过）"><a href="#Emoji-Wordle（通过）" class="headerlink" title="Emoji Wordle（通过）"></a>Emoji Wordle（通过）</h1><p>本题三问虽然内容不同，但是可以通过一个通用python爬虫脚本获取答案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: user_agent,</span><br><span class="line">    <span class="string">&#x27;Cookie&#x27;</span>: cookie</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_loop):</span><br><span class="line">    url = <span class="string">f&#x27;https://prob14.geekgame.pku.edu.cn/level3?guess=<span class="subst">&#123;guess&#125;</span>&#x27;</span></span><br><span class="line">    r = requests.get(url=url, headers=header)</span><br><span class="line">    html = r.text</span><br><span class="line">    <span class="comment"># print(html)</span></span><br><span class="line"></span><br><span class="line">    placeholder = re.findall(<span class="string">r&#x27;results\.push\(\&quot;(.*?)\&quot;\)&#x27;</span>, html)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># print(placeholder)</span></span><br><span class="line">    placeholder_array = np.array(<span class="built_in">list</span>(placeholder))</span><br><span class="line">    <span class="comment"># print(&quot;&quot;.join(placeholder_array))</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;🟩&#x27;</span> <span class="keyword">in</span> placeholder_array:</span><br><span class="line">        answer[placeholder_array == <span class="string">&#x27;🟩&#x27;</span>] = guess_array[placeholder_array == <span class="string">&#x27;🟩&#x27;</span>]</span><br><span class="line">        <span class="comment"># print(&quot;&quot;.join(answer))</span></span><br><span class="line"></span><br><span class="line">    guess = re.findall(<span class="string">r&#x27;placeholder=&quot;(.*?)&quot;&#x27;</span>, html)[<span class="number">0</span>]</span><br><span class="line">    guess_array = np.array(<span class="built_in">list</span>(guess))</span><br><span class="line">    <span class="comment"># print(result)</span></span><br></pre></td></tr></table></figure>
<p>这一脚本需要提前指定3个变量，以下为说明：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>变量名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>n_loop</td>
<td>循环次数，建议500即可</td>
</tr>
<tr>
<td>user_agent</td>
<td>输入自己浏览器数据请求的User-Agent</td>
</tr>
<tr>
<td>cookie</td>
<td>请求的cookie</td>
</tr>
<tr>
<td>guess</td>
<td>任意输入字符即可（不一定为64字符，也不一定为emoji）</td>
</tr>
</tbody>
</table>
</div>
<p>解题步骤如下：</p>
<p>1、打开浏览器访问题目页面，并刷新，通过“检查”功能获取获取源代码的请求，在请求头里可以找到User-Agent和cookie。其中对于cookie，Level 1不重要，Level 2的格式会类似于</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;PLAY_SESSION=eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7ImxldmVsIjoiMiIsInJlbWFpbmluZ19ndWVzc2VzIjoiOCIsInRhcmdldCI6Ilx...x...x...x...x...x...x...J9LCJuYmYiOjE2OTc0OTQ2OTIsImlhdCI6MTY5NzQ5NDY5Mn0.ISEVkOSj4SOcwubeiQsIgScgcwYpuPLo8oqRpD7M2cU; anticheat_canary=anylhetjnk&#x27;</span></span><br></pre></td></tr></table></figure>
<p>其中”x…”存储了emoji的信息；Level 3的格式类似于</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;PLAY_SESSION=eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7ImxldmVsIjoiMyIsInN0YXJ0X3RpbWUiOiIxNjk3NDk4NDY0MDc4IiwicmVtYWluaW5nX2d1ZXNzZXMiOiIzIiwic2VlZCI6IjMuMTY0NDQ1MDc4NTk0MDMxRTExIn0sIm5iZiI6MTY5NzQ5ODQ2NCwiaWF0IjoxNjk3NDk4NDY0fQ.88wkf3McLG5Wz3ybyMQzl-XKtmnZmXeLwHpolML2ZWk; anticheat_canary=anylhetjnk&#x27;</span></span><br></pre></td></tr></table></figure>
<p>相比2会短一些，需要注意Level 3有1分钟的有效时间，需要在一分钟内将程序的结果复制到浏览器结果内。</p>
<p>这是一种从爬虫角度进行的方法。通过这个方法，就没有了每一次猜测时的次数限制。</p>
<h1 id="汉化绿色版免费下载（通过）"><a href="#汉化绿色版免费下载（通过）" class="headerlink" title="汉化绿色版免费下载（通过）"></a>汉化绿色版免费下载（通过）</h1><p>(# prob25-krkr)</p>
<p>本题解法参考了<a href="https://iyn.me/i/post-45.html">博客</a>，主要工具为kirikiri对.ksd和.kdt文件的读写。</p>
<p>1、游戏源码打开后可以直接查看flag1。</p>
<p>2、从datasu.ksd中可以找到“AEIOU”分别被输入的次数和总字符数。游戏的逻辑如下：首先会初始化一个hash值，在这里是1337。第一遍输入时，会按照输入“AEIOU”分别进行不同的运算操作，结束时“}”符号也会再对hash值做一次运算。最后，总的字符和哈希值会分别保存在存档中。从存档文件可以发现一共18个字符，其中6个A，3个E，1个I，6个O，hash从初始的1337变为7748521.</p>
<p>第一个脚本用于在“input.txt”文件中输入所有可能的组合（在互联网上获取的）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span> *a, <span class="type">char</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">char</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">shouldSwap</span><span class="params">(<span class="type">char</span> *str, <span class="type">int</span> start, <span class="type">int</span> curr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; curr; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == str[curr]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">permute</span><span class="params">(<span class="type">char</span> *str, <span class="type">int</span> index, <span class="type">int</span> length, FILE *fp)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index == length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s\n&quot;</span>, str);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = index; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> check = shouldSwap(str, index, i);</span><br><span class="line">        <span class="keyword">if</span> (check) &#123;</span><br><span class="line">            swap(&amp;str[index], &amp;str[i]);</span><br><span class="line">            permute(str, index + <span class="number">1</span>, length, fp);</span><br><span class="line">            swap(&amp;str[index], &amp;str[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[] = <span class="string">&quot;AAAAAAEEEIOOOOOO&quot;</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(str);</span><br><span class="line">    FILE *fp;</span><br><span class="line">    fp = fopen(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    permute(str, <span class="number">0</span>, length, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个文件在于读入第一个文件输出的排列，逐一测试是否能通过hash值的校验。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">char</span> buffer[<span class="number">32</span>];</span><br><span class="line">  FILE *fp;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="type">long</span> <span class="type">int</span> hash;</span><br><span class="line"></span><br><span class="line">  fp = fopen(<span class="string">&quot;input.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> (fgets(buffer, <span class="number">255</span>, fp)) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    hash = <span class="number">1337</span>;</span><br><span class="line">    <span class="comment">// printf(&quot;%s&quot;, buffer);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(buffer); i++) &#123;</span><br><span class="line">        <span class="comment">// printf(&quot;%c&quot;, buffer[i]);</span></span><br><span class="line">        <span class="keyword">switch</span> (buffer[i]) &#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            hash = hash * <span class="number">13337</span> + <span class="number">11</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">            hash = hash * <span class="number">13337</span> + <span class="number">22</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">            hash = hash * <span class="number">13337</span> + <span class="number">33</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">            hash = hash * <span class="number">13337</span> + <span class="number">44</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">            hash = hash * <span class="number">13337</span> + <span class="number">55</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hash %= <span class="number">19260817</span>;</span><br><span class="line">        <span class="comment">// printf(&quot;%ld\n&quot;, hash);</span></span><br><span class="line">        assert (hash &gt;= <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    hash = hash * <span class="number">13337</span> + <span class="number">66</span>;</span><br><span class="line">    hash %= <span class="number">19260817</span>;</span><br><span class="line">    assert (hash &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// printf(&quot;Hash = %ld\n&quot;, hash);</span></span><br><span class="line">    <span class="keyword">if</span> (hash == <span class="number">7748521</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;result: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">100000</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%d checked.\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fclose(fp);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行就可以获得唯一结果。</p>
<h1 id="初学C语言（flag1）"><a href="#初学C语言（flag1）" class="headerlink" title="初学C语言（flag1）"></a>初学C语言（flag1）</h1><p>(# prob09-easyc)</p>
<p>本题利用了gcc编译printf格式化输出时可以任意获得栈上变量的漏洞。</p>
<p>下载用题目源码带上-g编译，并用gdb调试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc pwn.c -o pwn -static-pie -g</span><br><span class="line">gdb a.out</span><br></pre></td></tr></table></figure>
<p>在gdb中printf处设置断点，随后查看栈的情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">b printf # 之后任意输入值</span><br><span class="line">run</span><br><span class="line">stack 30</span><br></pre></td></tr></table></figure>
<p>看到想要获取的flag1位置与printf参数的位置(“a_public_string”)有26的偏移量，可以在程序中输入</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">%26$p %27$p %27$p %28$p</span><br></pre></td></tr></table></figure>
<p>获得</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">0x3465527b67616c66 0x66546e3172505f64 0x66546e3172505f64 0x6f735f654430635f</span><br></pre></td></tr></table></figure>
<p>将每一个值反向按16进制转ascii码，就得到了flag。</p>
<h1 id="关键词过滤喵，谢谢喵（flag1，flag2）"><a href="#关键词过滤喵，谢谢喵（flag1，flag2）" class="headerlink" title="关键词过滤喵，谢谢喵（flag1，flag2）"></a>关键词过滤喵，谢谢喵（flag1，flag2）</h1><p>1、flag1需要统计字符数量，按照以下思路即可完成</p>
<ul>
<li><p>把所有字符替换成统一字符，例如“A”</p>
</li>
<li><p>如果没有“A”就替换一个0，输出即可结束</p>
</li>
<li><p>把第一个“A”替换成“0A”，“0”代表现在开始统计了0个字符</p>
</li>
<li><p>把0-8数字+A的组合替换成大1的数字，这里需要写八条指令，意思是把个位数加1，并去掉一个字符</p>
</li>
<li><p>如果数字是9，需要进位，进入进位模块</p>
</li>
<li><p>进位需要引入一个进位符，表示进1位，例如B，进位时，需要不断把“9A”替换成“0B”，这可以用于遇到多次进位时不断进位。</p>
</li>
<li><p>最终如果没有“A”了，就可以结束</p>
</li>
</ul>
<p>以下是参考的规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把【\s|\S】替换成【A】喵</span><br><span class="line">把【^A】替换成【0A】喵</span><br><span class="line">把【^$】替换成【0】喵</span><br><span class="line"></span><br><span class="line">加一：</span><br><span class="line">  把【0A】替换成【1】喵</span><br><span class="line">  把【1A】替换成【2】喵</span><br><span class="line">  把【2A】替换成【3】喵</span><br><span class="line">  把【3A】替换成【4】喵</span><br><span class="line">  把【4A】替换成【5】喵</span><br><span class="line">  把【5A】替换成【6】喵</span><br><span class="line">  把【6A】替换成【7】喵</span><br><span class="line">  把【7A】替换成【8】喵</span><br><span class="line">  把【8A】替换成【9】喵</span><br><span class="line">  如果看到【9A】就跳转到【进位】喵</span><br><span class="line">  如果没看到【A】就跳转到【结束】喵</span><br><span class="line"></span><br><span class="line">进位：</span><br><span class="line">  把【9A】替换成【B0】喵</span><br><span class="line">  重复把【9B】替换成【B0】喵</span><br><span class="line">  把【8B】替换成【9】喵</span><br><span class="line">  把【7B】替换成【8】喵</span><br><span class="line">  把【6B】替换成【7】喵</span><br><span class="line">  把【5B】替换成【6】喵</span><br><span class="line">  把【4B】替换成【5】喵</span><br><span class="line">  把【3B】替换成【4】喵</span><br><span class="line">  把【2B】替换成【3】喵</span><br><span class="line">  把【1B】替换成【2】喵</span><br><span class="line">  把【0B】替换成【1】喵</span><br><span class="line">  把【B】替换成【1】喵</span><br><span class="line">  如果看到【A】就跳转到【加一】喵</span><br><span class="line"></span><br><span class="line">结束：</span><br><span class="line">  谢谢喵</span><br></pre></td></tr></table></figure>
<p>2、因为在这个问题中只有换行符是可以自由替换，不影响结果的，所以需要灵活运用换行符的替换。思路如下</p>
<ul>
<li><p>把所有换行符去除，并在开头、末尾和每两行之间插入两个空行</p>
</li>
<li><p>开始时，把每一行的第一个字符后加入换行，这样所有文本之间都空了两行，每一段文本分割成连续的两行，第一行表示已经统计的文本，第二行表示尚未统计的，此后每一次都将第二行的第一个字符放到第一行末尾</p>
</li>
<li><p>如果遇到出现连续3个空行，说明已经有一行文本统计完毕，这是最短的那一行文本，将其放在最后一行（这一步需要多次判断，以防有同样长度的），与还在统计的文本用4个换行隔开，以防之前的操作混乱</p>
</li>
<li><p>之后继续重复，每遇到一次三连换行就将这一换行前的文本放置最后</p>
</li>
<li><p>最后如果没有连续的两行，说明统计结束，将所有换行去掉即可</p>
</li>
</ul>
<p>本题在测试时，发现如果最短行唯一且在最后一行的时候会在将这一行移到末尾时换行数量出现问题，因此我将答案操作的主体内容了两遍。实际上，如果遇到只有长度不同的两行的情况，且短行在第二行时，输出是不对的。但是测试用例里似乎没有这样的例子，我编译通过之后就没有继续改了。参考源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果没看到【\n】就跳转到【结束】喵</span><br><span class="line">重复把【\n&#123;2&#125;】替换成【\n】喵</span><br><span class="line">重复把【^\n】替换成【】喵</span><br><span class="line">重复把【\n$】替换成【】喵</span><br><span class="line">把【\n】替换成【\n\n】喵</span><br><span class="line">把【^】替换成【\n\n】喵</span><br><span class="line">把【$】替换成【\n\n】喵</span><br><span class="line"></span><br><span class="line">把【\n&#123;2&#125;(.)】替换成【\n\n\1\n】喵</span><br><span class="line">如果看到【.+\n&#123;3&#125;[^\n]】就跳转到【有行结束1】喵</span><br><span class="line">如果没看到【\n&#123;2&#125;(.+)\n&#123;1&#125;(.)】就跳转到【结束1】喵</span><br><span class="line"></span><br><span class="line">右移1：</span><br><span class="line">  把【\n&#123;2&#125;(.+)\n&#123;1&#125;(.)】替换成【\n\n\1\2\n】喵</span><br><span class="line">  如果没看到【.+\n&#123;3&#125;[^\n]】就跳转到【右移1】喵</span><br><span class="line"></span><br><span class="line">有行结束1：</span><br><span class="line">  把【(.+\n&#123;3&#125;)&#123;1&#125;((\w|\W)*)$】替换成【\2\1\n】喵</span><br><span class="line">  如果看到【.+\n&#123;3&#125;[^\n]】就跳转到【有行结束1】喵</span><br><span class="line">  如果看到【\n&#123;2&#125;(.+)\n&#123;1&#125;(.)】就跳转到【右移1】喵</span><br><span class="line"></span><br><span class="line">结束1：</span><br><span class="line">  重复把【\n\n】替换成【\n】喵</span><br><span class="line">  把【^\n】替换成【】喵</span><br><span class="line">  把【\n$】替换成【】喵</span><br><span class="line"></span><br><span class="line">如果没看到【\n】就跳转到【结束】喵</span><br><span class="line">重复把【\n&#123;2&#125;】替换成【\n】喵</span><br><span class="line">重复把【^\n】替换成【】喵</span><br><span class="line">重复把【\n$】替换成【】喵</span><br><span class="line">把【\n】替换成【\n\n】喵</span><br><span class="line">把【^】替换成【\n\n】喵</span><br><span class="line">把【$】替换成【\n\n】喵</span><br><span class="line"></span><br><span class="line">把【\n&#123;2&#125;(.)】替换成【\n\n\1\n】喵</span><br><span class="line">如果看到【.+\n&#123;3&#125;[^\n]】就跳转到【有行结束2】喵</span><br><span class="line">如果没看到【\n&#123;2&#125;(.+)\n&#123;1&#125;(.)】就跳转到【结束】喵</span><br><span class="line"></span><br><span class="line">右移2：</span><br><span class="line">  把【\n&#123;2&#125;(.+)\n&#123;1&#125;(.)】替换成【\n\n\1\2\n】喵</span><br><span class="line">  如果没看到【.+\n&#123;3&#125;[^\n]】就跳转到【右移2】喵</span><br><span class="line"></span><br><span class="line">有行结束2：</span><br><span class="line">  把【(.+\n&#123;3&#125;)&#123;1&#125;((\w|\W)*)$】替换成【\2\1\n】喵</span><br><span class="line">  如果看到【.+\n&#123;3&#125;[^\n]】就跳转到【有行结束2】喵</span><br><span class="line">  如果看到【\n&#123;2&#125;(.+)\n&#123;1&#125;(.)】就跳转到【右移2】喵</span><br><span class="line"></span><br><span class="line">结束：</span><br><span class="line">  重复把【\n\n】替换成【\n】喵</span><br><span class="line">  把【^\n】替换成【】喵</span><br><span class="line">  把【\n$】替换成【】喵</span><br><span class="line"></span><br><span class="line">感谢：</span><br><span class="line">  谢谢喵</span><br></pre></td></tr></table></figure>
<h1 id="小章鱼的曲奇（通过）"><a href="#小章鱼的曲奇（通过）" class="headerlink" title="小章鱼的曲奇（通过）"></a>小章鱼的曲奇（通过）</h1><p>(#prob08-cookie)</p>
<p>本题原理是基于python随机数的算法是MT19937，这一算法根据前624个8字节的数可以确定状态，从而预测后续的随机数。本题直接采用以开发好的python第三方库randcrack。</p>
<p>1、刚开始搞错了位数，代码经过了一些无脑修改，写的质量不高。思路如下：</p>
<ul>
<li>words的前2500个字符是0，因此与随机数异或运算后保留的是随机数本身，通过这些字节预测后续随机数，在异或回去就可以得到words</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="string">&quot;???&quot;</span> <span class="comment"># 输入输出结果</span></span><br><span class="line">result_bytes = <span class="built_in">bytes</span>.fromhex(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decom_32_to_8</span>(<span class="params">num</span>):</span><br><span class="line">    num_decom = []</span><br><span class="line">    num_decom.append(num // (<span class="number">1</span> &lt;&lt; <span class="number">24</span>))</span><br><span class="line">    num %= (<span class="number">1</span> &lt;&lt; <span class="number">24</span>)</span><br><span class="line">    num_decom.append(num // (<span class="number">1</span> &lt;&lt; <span class="number">16</span>))</span><br><span class="line">    num %= (<span class="number">1</span> &lt;&lt; <span class="number">16</span>)</span><br><span class="line">    num_decom.append(num // (<span class="number">1</span> &lt;&lt; <span class="number">8</span>))</span><br><span class="line">    num %= (<span class="number">1</span> &lt;&lt; <span class="number">8</span>)</span><br><span class="line">    num_decom.append(num)</span><br><span class="line">    <span class="keyword">return</span> num_decom</span><br><span class="line"></span><br><span class="line">rc = RandCrack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">    num_submit = (result_bytes[<span class="number">4</span> * i] &lt;&lt; <span class="number">0</span>) + (result_bytes[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + (result_bytes[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (result_bytes[<span class="number">4</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>)</span><br><span class="line">    rc.submit(num_submit)</span><br><span class="line">num32_pre_1 = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">num32_pre_2 = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">num32_pre_3 = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">num32_pre_4 = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">num32_pre_5 = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">num32_pre_6 = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">num32_pre_7 = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line">num32_pre_8 = rc.predict_getrandbits(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span> = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">next</span>[<span class="number">3</span>], <span class="built_in">next</span>[<span class="number">2</span>], <span class="built_in">next</span>[<span class="number">1</span>], <span class="built_in">next</span>[<span class="number">0</span>] = decom_32_to_8(num32_pre_1)</span><br><span class="line"><span class="built_in">next</span>[<span class="number">7</span>], <span class="built_in">next</span>[<span class="number">6</span>], <span class="built_in">next</span>[<span class="number">5</span>], <span class="built_in">next</span>[<span class="number">4</span>] = decom_32_to_8(num32_pre_2)</span><br><span class="line"><span class="built_in">next</span>[<span class="number">11</span>], <span class="built_in">next</span>[<span class="number">10</span>], <span class="built_in">next</span>[<span class="number">9</span>], <span class="built_in">next</span>[<span class="number">8</span>]= decom_32_to_8(num32_pre_3)</span><br><span class="line"><span class="built_in">next</span>[<span class="number">15</span>], <span class="built_in">next</span>[<span class="number">14</span>], <span class="built_in">next</span>[<span class="number">13</span>], <span class="built_in">next</span>[<span class="number">12</span>] = decom_32_to_8(num32_pre_4)</span><br><span class="line"><span class="built_in">next</span>[<span class="number">19</span>], <span class="built_in">next</span>[<span class="number">18</span>], <span class="built_in">next</span>[<span class="number">17</span>], <span class="built_in">next</span>[<span class="number">16</span>] = decom_32_to_8(num32_pre_5)</span><br><span class="line"><span class="built_in">next</span>[<span class="number">23</span>], <span class="built_in">next</span>[<span class="number">22</span>], <span class="built_in">next</span>[<span class="number">21</span>], <span class="built_in">next</span>[<span class="number">20</span>] = decom_32_to_8(num32_pre_6)</span><br><span class="line"><span class="built_in">next</span>[<span class="number">27</span>], <span class="built_in">next</span>[<span class="number">26</span>], <span class="built_in">next</span>[<span class="number">25</span>], <span class="built_in">next</span>[<span class="number">24</span>] = decom_32_to_8(num32_pre_7)</span><br><span class="line"><span class="built_in">next</span>[<span class="number">31</span>], <span class="built_in">next</span>[<span class="number">30</span>], <span class="built_in">next</span>[<span class="number">29</span>], <span class="built_in">next</span>[<span class="number">28</span>] = decom_32_to_8(num32_pre_8)</span><br><span class="line"><span class="built_in">next</span>[<span class="number">35</span>], <span class="built_in">next</span>[<span class="number">34</span>], <span class="built_in">next</span>[<span class="number">33</span>], <span class="built_in">next</span>[<span class="number">32</span>] = decom_32_to_8(num32_pre_8)</span><br><span class="line"></span><br><span class="line">next_hex = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">    next_hex[i] = <span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">hex</span>(<span class="built_in">next</span>[i])[<span class="number">2</span>:]:<span class="number">0</span>&gt;<span class="number">2</span>&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">last_34 = <span class="string">&#x27;&#x27;</span>.join(next_hex[:<span class="number">34</span>])</span><br><span class="line">flag_bytes = [(x ^ y) <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">bytes</span>.fromhex(last_34), result_bytes[-<span class="number">33</span>:])]</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> flag_bytes])</span><br><span class="line"><span class="comment"># flag_bytes</span></span><br></pre></td></tr></table></figure>
<p>2、第二题类似，主要利用的是异或的交换律、结合律、逆运算为本身。在这里虽然设置了熵对随机数进行了偏移，但是测试可以发现随机数异或后不会影响结果。</p>
<ul>
<li>用随机数种子产生两个随机数状态，熵从0开始计算，每一次按照words和输出结果的关系进行异或运算。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="string">&quot;???&quot;</span> <span class="comment"># 输入输出结果</span></span><br><span class="line">result_bytes = <span class="built_in">bytes</span>.fromhex(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decom_32_to_8</span>(<span class="params">num</span>):</span><br><span class="line">    num_decom = []</span><br><span class="line">    num_decom.append(num // (<span class="number">1</span> &lt;&lt; <span class="number">24</span>))</span><br><span class="line">    num %= (<span class="number">1</span> &lt;&lt; <span class="number">24</span>)</span><br><span class="line">    num_decom.append(num // (<span class="number">1</span> &lt;&lt; <span class="number">16</span>))</span><br><span class="line">    num %= (<span class="number">1</span> &lt;&lt; <span class="number">16</span>)</span><br><span class="line">    num_decom.append(num // (<span class="number">1</span> &lt;&lt; <span class="number">8</span>))</span><br><span class="line">    num %= (<span class="number">1</span> &lt;&lt; <span class="number">8</span>)</span><br><span class="line">    num_decom.append(num)</span><br><span class="line">    <span class="keyword">return</span> num_decom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> entropy <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> &lt;&lt; <span class="number">22</span>):</span><br><span class="line">    void1 = Random(seed1)</span><br><span class="line">    void2 = Random(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    void1.randbytes(entropy)</span><br><span class="line">    void2.randbytes(entropy)</span><br><span class="line"></span><br><span class="line">    vd1 = void1.randbytes(<span class="number">2533</span>)</span><br><span class="line">    vd2 = void2.randbytes(<span class="number">2533</span>)</span><br><span class="line"></span><br><span class="line">    first_result = xor_arrays(result_bytes, vd1, vd2)</span><br><span class="line">    rc = RandCrack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">624</span>):</span><br><span class="line">        num_submit = (first_result[<span class="number">4</span> * i] &lt;&lt; <span class="number">0</span>) + (first_result[<span class="number">4</span> * i + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + (first_result[<span class="number">4</span> * i + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + (first_result[<span class="number">4</span> * i + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>)</span><br><span class="line">        rc.submit(num_submit)</span><br><span class="line"></span><br><span class="line">    random_2496_2535 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        r1, r2, r3, r4 = decom_32_to_8(rc.predict_getrandbits(<span class="number">32</span>))</span><br><span class="line">        random_2496_2535.append(r4)</span><br><span class="line">        random_2496_2535.append(r3)</span><br><span class="line">        random_2496_2535.append(r2)</span><br><span class="line">        random_2496_2535.append(r1)</span><br><span class="line"></span><br><span class="line">    random_2500_2532 = random_2496_2535[<span class="number">4</span>:-<span class="number">3</span>]</span><br><span class="line">    vd3_pre = <span class="string">b&#x27;&#x27;</span>.join([<span class="built_in">bytes</span>.fromhex(<span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">hex</span>(i)[<span class="number">2</span>:]:<span class="number">0</span>&gt;<span class="number">2</span>&#125;</span>&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> random_2500_2532])</span><br><span class="line"></span><br><span class="line">    vd123 = xor_arrays(vd1[<span class="number">2500</span>:], vd2[<span class="number">2500</span>:], vd3_pre)</span><br><span class="line"></span><br><span class="line">    flag_bytes = [(x ^ y) <span class="keyword">for</span> x, y <span class="keyword">in</span> <span class="built_in">zip</span>(vd123, result_bytes[<span class="number">2500</span>:])]</span><br><span class="line">    answer = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> flag_bytes])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> answer:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\n<span class="subst">&#123;answer&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\r<span class="subst">&#123;entropy&#125;</span> / <span class="subst">&#123;<span class="number">1</span> &lt;&lt; <span class="number">22</span>&#125;</span> has finished.&#x27;</span> , end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>3、利用zip参数长度不一致时只会取最短的那个，复制输入第一个十六进制的随机数就能通过。</p>
<h1 id="华维码（flag1）"><a href="#华维码（flag1）" class="headerlink" title="华维码（flag1）"></a>华维码（flag1）</h1><p>(# prob19-qrcode)</p>
<p>本题无需在网页上通过华容道，直接拼出二维码扫描即可。本题使用python第三方库pyzbar进行二维码扫描，思路分两步。</p>
<ul>
<li><p>通过浏览器抓包功能下载24张图片，可以发现缺少的是二维码左上的图，直接旋转一张右上或左下的图即可</p>
</li>
<li><p>flag1是version 2的二维码。按照二维码的规范，可以确定16张图片的位置。剩下的9张图片，第4行第5个图片只有两种可能性。右下角的那一张必须左上方是黑点。排列组合后一共有65520种情况。</p>
</li>
<li><p>使用python的pillow进行图片拼接，并逐一扫描即可获得答案。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">pixel = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">pic_dir = <span class="string">&#x27;./picture/&#x27;</span></span><br><span class="line">save_dir = <span class="string">&#x27;./qrcode/&#x27;</span></span><br><span class="line"><span class="comment"># pic_file_list = [file for file in os.listdir(pic_dir) if &quot;.png&quot; in file]</span></span><br><span class="line"></span><br><span class="line">fix_file_list = [<span class="string">&#x27;AA.png&#x27;</span>, <span class="string">&#x27;AB.png&#x27;</span>, <span class="string">&#x27;AD.png&#x27;</span>, <span class="string">&#x27;AE.png&#x27;</span>, <span class="string">&#x27;BA.png&#x27;</span>, <span class="string">&#x27;BB.png&#x27;</span>, <span class="string">&#x27;BC.png&#x27;</span>, <span class="string">&#x27;BD.png&#x27;</span>, <span class="string">&#x27;BE.png&#x27;</span>, <span class="string">&#x27;CB.png&#x27;</span>, <span class="string">&#x27;DA.png&#x27;</span>, <span class="string">&#x27;DB.png&#x27;</span>, <span class="string">&#x27;DD.png&#x27;</span>, <span class="string">&#x27;EA.png&#x27;</span>, <span class="string">&#x27;EB.png&#x27;</span>, <span class="string">&#x27;ED.png&#x27;</span>]</span><br><span class="line">fix_locs = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">3</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># DEpos_file_list = [&#x27;DE1.png&#x27;, &#x27;DE2.png&#x27;]</span></span><br><span class="line"><span class="comment"># other_file_list = [&#x27;e1.png&#x27;, &#x27;e2.png&#x27;, &#x27;e3.png&#x27;, &#x27;e4.png&#x27;, &#x27;e5.png&#x27;, &#x27;e6.png&#x27;, &#x27;n1.png&#x27;]</span></span><br><span class="line">mob_file_list = [<span class="string">&#x27;DE1.png&#x27;</span>, <span class="string">&#x27;DE2.png&#x27;</span>, <span class="string">&#x27;e1.png&#x27;</span>, <span class="string">&#x27;e2.png&#x27;</span>, <span class="string">&#x27;e3.png&#x27;</span>, <span class="string">&#x27;e4.png&#x27;</span>, <span class="string">&#x27;e5.png&#x27;</span>, <span class="string">&#x27;e6.png&#x27;</span>, <span class="string">&#x27;n1.png&#x27;</span>]</span><br><span class="line">mob_locs = [[<span class="number">2</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">3</span>] ,[<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># image_aa = Image.open(f&#x27;&#123;pic_dir&#125;AA.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_ab = Image.open(f&#x27;&#123;pic_dir&#125;AB.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_ad = Image.open(f&#x27;&#123;pic_dir&#125;AD.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_ae = Image.open(f&#x27;&#123;pic_dir&#125;AE.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_ba = Image.open(f&#x27;&#123;pic_dir&#125;BA.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_bb = Image.open(f&#x27;&#123;pic_dir&#125;BB.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_bc = Image.open(f&#x27;&#123;pic_dir&#125;BC.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_bd = Image.open(f&#x27;&#123;pic_dir&#125;BD.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_be = Image.open(f&#x27;&#123;pic_dir&#125;BE.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_cb = Image.open(f&#x27;&#123;pic_dir&#125;CB.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_da = Image.open(f&#x27;&#123;pic_dir&#125;DA.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_db = Image.open(f&#x27;&#123;pic_dir&#125;DB.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_dd = Image.open(f&#x27;&#123;pic_dir&#125;DD.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_ea = Image.open(f&#x27;&#123;pic_dir&#125;EA.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_eb = Image.open(f&#x27;&#123;pic_dir&#125;EB.png&#x27;)</span></span><br><span class="line"><span class="comment"># image_ed = Image.open(f&#x27;&#123;pic_dir&#125;ED.png&#x27;)</span></span><br><span class="line"></span><br><span class="line">fix_images = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> fix_file_list:</span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;pic_dir&#125;</span><span class="subst">&#123;file&#125;</span>&#x27;</span>)</span><br><span class="line">    fix_images.append(image)</span><br><span class="line"></span><br><span class="line">mob_images = []</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> mob_file_list:</span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;pic_dir&#125;</span><span class="subst">&#123;file&#125;</span>&#x27;</span>)</span><br><span class="line">    mob_images.append(image)</span><br><span class="line"></span><br><span class="line">big_image = Image.new(<span class="string">&quot;1&quot;</span>, (<span class="number">250</span>, <span class="number">250</span>))</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(loc_arange)):</span><br><span class="line">    mob_locs_j = loc_arange[j]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fix_images)):</span><br><span class="line">        big_image.paste(fix_images[i], <span class="built_in">list</span>(pixel * np.array(fix_locs[i])))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mob_images)):</span><br><span class="line">        big_image.paste(mob_images[i], <span class="built_in">list</span>(pixel * np.array(mob_locs_j[i])))</span><br><span class="line">    big_image.save(<span class="string">f&#x27;<span class="subst">&#123;save_dir&#125;</span>big_image_<span class="subst">&#123;j&#125;</span>.png&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\rImage <span class="subst">&#123;j + <span class="number">1</span>&#125;</span> / <span class="subst">&#123;<span class="built_in">len</span>(loc_arange)&#125;</span> saved.&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">qr_dir = <span class="string">&#x27;./qrcode/&#x27;</span></span><br><span class="line">images = [f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(qr_dir) <span class="keyword">if</span> <span class="keyword">not</span> f.startswith(<span class="string">&#x27;.&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(images)):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;qr_dir&#125;</span>big_image_<span class="subst">&#123;i&#125;</span>.png&#x27;</span>) <span class="comment"># Open the image file</span></span><br><span class="line">    data = decode(image) <span class="comment"># Decode the QR code in the image</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check if the QR code is valid</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\nbig_image_<span class="subst">&#123;i&#125;</span> is valid.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;\r<span class="subst">&#123;i + <span class="number">1</span>&#125;</span> / <span class="subst">&#123;<span class="built_in">len</span>(images)&#125;</span> has finished&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>competition</category>
      </categories>
      <tags>
        <tag>geekgame</tag>
        <tag>CTF</tag>
        <tag>参赛记录</tag>
      </tags>
  </entry>
</search>
